const Order = require("../models/Order");

exports.createOrder = async (req, res) => {
  try {
    // Log the incoming request body for debugging
    console.log("Received order data:", req.body);

    const orderData = {
      customerName: req.body.customerName,
      email: req.body.email,
      phone: req.body.phone,
      address: req.body.address,
      items: req.body.items,
      total: req.body.total,
      specialInstructions: req.body.specialInstructions,
      type: req.body.type || "delivery",
      paymentMethod: req.body.paymentMethod,
      paymentStatus: req.body.paymentStatus || "pending",
      // orderNumber will be generated by the pre-save hook
    };

    // Validate required fields
    const requiredFields = [
      "customerName",
      "email",
      "phone",
      "address",
      "items",
      "total",
      "paymentMethod",
    ];
    const missingFields = requiredFields.filter((field) => !orderData[field]);

    if (missingFields.length > 0) {
      return res.status(400).json({
        message: `Missing required fields: ${missingFields.join(", ")}`,
      });
    }

    const order = new Order(orderData);
    const savedOrder = await order.save();

    // Emit websocket event for real-time updates
    if (req.app.get("io")) {
      req.app.get("io").emit("orderUpdate", {
        type: "NEW_ORDER",
        order: savedOrder,
      });
    }

    res.status(201).json(savedOrder);
  } catch (error) {
    console.error("Order creation error:", error);
    res.status(400).json({
      message: "Error creating order",
      error: error.message,
      details: error.errors,
    });
  }
};

exports.getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find().sort({ createdAt: -1 });
    res.status(200).json(orders);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching orders", error: error.message });
  }
};

exports.updateOrder = async (req, res) => {
  try {
    const orderId = req.params.id;
    const updates = req.body;

    // Find the order and update it
    const order = await Order.findByIdAndUpdate(
      orderId,
      { $set: updates },
      { new: true, runValidators: true }
    );

    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    // Emit websocket event for real-time updates
    if (req.app.get("io")) {
      req.app.get("io").emit("orderUpdate", {
        type: "ORDER_UPDATE",
        order,
      });
    }

    res.status(200).json(order);
  } catch (error) {
    console.error("Error updating order:", error);
    res.status(400).json({
      message: "Error updating order",
      error: error.message,
      details: error.errors,
    });
  }
};

exports.getOrder = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.status(200).json(order);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error fetching order", error: error.message });
  }
};

exports.deleteOrder = async (req, res) => {
  try {
    const order = await Order.findByIdAndDelete(req.params.id);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }
    res.status(200).json({ message: "Order deleted successfully" });
  } catch (error) {
    res
      .status(500)
      .json({ message: "Error deleting order", error: error.message });
  }
};
